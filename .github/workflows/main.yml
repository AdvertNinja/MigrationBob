name: Build & Deploy to EC2 (ECR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: 332943346407.dkr.ecr.eu-north-1.amazonaws.com
  ECR_REPOSITORY: advertninja/migrationbob-api
  IMAGE_NAME: 332943346407.dkr.ecr.eu-north-1.amazonaws.com/advertninja/migrationbob-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push (latest + sha)
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e

            aws ecr get-login-password --region eu-north-1 \
              | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            sudo docker pull $IMAGE_NAME:latest || true

            if sudo docker ps -a --format '{{.Names}}' | grep -q '^migrationbob-api$'; then
              sudo docker rm -f migrationbob-api || true
            fi

            sudo docker run -d --name migrationbob-api --restart unless-stopped \
              -p 8080:8080 \
              -e ASPNETCORE_URLS=http://0.0.0.0:8080 \
              -e FRONTEND_ORIGINS="https://cemex.advert.ninja" \
              $IMAGE_NAME:latest

            sudo docker image prune -f || true
